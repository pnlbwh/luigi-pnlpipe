#!/usr/bin/bash

: << COMMENT
Running this script w/o GPU support would take a long time (>24 hours).
So always try to use a GPU enabled machine e.g. grx** nodes, eristwo gpu queue.
=> Copy this script to your project directory and update the marked variables.
=> Execute within shell as ./hcp_pnl_topup.lsf
=> To execute through LSF, adjust [1-N]%2 and "BSUB -n 4" as explained below.
COMMENT

# ==============================================================================

#BSUB -J hcp-topup[1-N]%2
#BSUB -q gpu
#BSUB -m ml001
#BSUB -R rusage[mem=12000]
#BSUB -o /data/pnl/U01_HCP_Psychosis/data_processing/output/hcp-topup-%J-%I.out
#BSUB -e /data/pnl/U01_HCP_Psychosis/data_processing/output/hcp-topup-%J-%I.err
#BSUB -n 4

export CUDA_VISIBLE_DEVICES=$(( ${LSB_JOBINDEX}%2 ))

: << COMMENT
The formula for CUDA_VISIBLE_DEVICES is ${LSB_JOBINDEX}%G,
which also means the maximum number of parallel cases you can process is G

Adjust "BSUB -n 4" in a way that each GPU device can run no more than one job.
You can use the formula "BSUB -n N/G" to ensure that where--
    - N is the maximum number of jobs for that node
    - G is the number of GPUs in that node
Otherwise your jobs might crash due to out of memory error.

Example: node ml001 has 8(=N) job slots and 2(=G) GPUs so "BSUB -n 8/2" and "BSUB -J hcp-topup[1-N]%2"

COMMENT



bids_data_dir=/data/pnl/U01_HCP_Psychosis/data_processing/BIDS/rawdata

# write four templates in the following order
# PA template, PA template
# AP template, AP template
raw_template="sub-*/ses-*/dwi/*_ses-*_acq-PA_dir-99_dwi.nii.gz sub-*/ses-*/dwi/*_ses-*_acq-PA_dir-107_dwi.nii.gz \
              sub-*/ses-*/dwi/*_ses-*_acq-AP_dir-99_dwi.nii.gz sub-*/ses-*/dwi/*_ses-*_acq-AP_dir-107_dwi.nii.gz"
unr_template="*_ses-*_acq-PA_dir-99_desc-XcUn_dwi.nii.gz *_ses-*_acq-PA_dir-107_desc-XcUn_dwi.nii.gz \
              *_ses-*_acq-AP_dir-99_desc-XcUn_dwi.nii.gz *_ses-*_acq-AP_dir-107_desc-XcUn_dwi.nii.gz"

# a single caseid or a text file with list of cases
caselist=1004

LUIGI_CONFIG_PATH=/data/pnl/soft/pnlpipe3/luigi-pnlpipe/params/hcp/dwi_pipe_params.cfg

# task is one of {HcpPipe,Ukf,Wma800}
task=HcpPipe

# ==============================================================================


HcpOutDir=hcppipe

export HCPPIPEDIR=/data/pnl/soft/pnlpipe3/HCPpipelines
export HCPPIPEDIR_Config=/data/pnl/soft/pnlpipe3/HCPpipelines/global/config
export HCPPIPEDIR_Global=/data/pnl/soft/pnlpipe3/HCPpipelines/global/scripts

export LUIGI_CONFIG_PATH
source /data/pnl/soft/pnlpipe3/CNN-Diffusion-MRIBrain-Segmentation/train_env


if [ -f ${caselist} ]
then
    # LSF script, list of subjects
    i=`head -${LSB_JOBINDEX} ${caselist} | tail -1`
else
    # shell script, one subject
    i=${caselist}
fi


# luigi-pnlpipe upto GibbsUn so data can be organized according to BIDS
for j in $(echo $raw_template)
do
    /data/pnl/soft/pnlpipe3/luigi-pnlpipe/workflows/ExecuteTask.py \
    --bids-data-dir $bids_data_dir \
    --task GibbsUn -c $i \
    --dwi-template $j
done


# determine --path for HCP pipe
template=($raw_template)
subdir=`echo ${template[0]} | sed "s+sub-\*+sub-$i+g"`
datadir=`dirname $bids_data_dir`/derivatives/pnlpipe/`dirname $subdir`
echo "HCP pipe data directory: $datadir"


# HCP pipe using GibbsUn data
if [ ! -f $datadir/$HcpOutDir/Diffusion/eddy/eddy_unwarped_images.nii.gz ]
then
    echo """
    Echo spacing for HCP data is 0.689998 milliseconds.
    It is obtained from the key EffectiveEchoSpacing (seconds) in BIDS sidecar yielded by dcm2niix.
    Command being issued to HCP pipeline:
    """
    
    template=($unr_template)
    cmd="$HCPPIPEDIR/DiffusionPreprocessing/DiffPreprocPipeline.sh --path=$datadir \
    --subject=$HcpOutDir --cuda-version=9.1 \
    --posData=`ls $datadir/${template[0]}`@`ls $datadir/${template[1]}` \
    --negData=`ls $datadir/${template[2]}`@`ls $datadir/${template[3]}` \
    --echospacing=0.689998 --PEdir=2 --gdcoeffs=NONE \
    --extra-eddy-arg=--data_is_shelled --extra-eddy-arg=--repol --extra-eddy-arg=--verbose"
    echo $cmd
    echo ''
    $cmd || exit 1
fi


# create symlinks
template=($raw_template)
/data/pnl/soft/pnlpipe3/luigi-pnlpipe/workflows/ExecuteTask.py \
--bids-data-dir $bids_data_dir \
--dwi-template ${template[0]} \
--task $task -c $i

